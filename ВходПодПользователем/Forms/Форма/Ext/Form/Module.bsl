
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИмяТекПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
	
	ЗаполнитьПараметрыВходов();
	
	ПодключитьКОтладке = ХранилищеОбщихНастроек.Загрузить("ОбработкаВходПодПользователем", "ПодключатьКОтладке",, ИмяТекПользователя);
	ПодключитьКОтладкеЗначениеВНастройках = ПодключитьКОтладке;
	
	НастроитьУсловноеОформлениеПоТекущемуПользователю();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПротоколОтладки = Элементы.ПротоколОтладки.СписокВыбора[0].Значение;
	СерверОтладки = ИмяКомпьютера();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	СтруктураПоиска = Новый Структура("АктивныВременныеПараметрыПользователя", Истина);
	Если Объект.ПараметрыВходов.НайтиСтроки(СтруктураПоиска).Количество() Тогда
		ВосстановитьВсеПараметрыВходаНаСервере();	
	КонецЕсли; 
	
	Если ЗавершениеРаботы Тогда
		Если ПодключитьКОтладке <> ПодключитьКОтладкеЗначениеВНастройках Тогда
			Отказ = Истина;
			ТекстПредупреждения = "Изменённые настройки не будут сохранены!";	
		КонецЕсли;
	Иначе
		ПередЗакрытиемНаСервере();
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПередЗакрытиемНаСервере()
	
	ХранилищеОбщихНастроек.Сохранить("ОбработкаВходПодПользователем", "ПодключатьКОтладке", ПодключитьКОтладке,, ИмяТекПользователя);
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКоманд

&НаКлиенте
Процедура КомандаВойтиПодПользователем(Команда)
	
	ВходПодПользователем(); 	
	
КонецПроцедуры
&НаКлиенте
Процедура КомандаВосстановитьПараметрыВхода(Команда)
	
	ТекДанные = Элементы.ПараметрыВходов.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ВосстановитьПараметрыПользователя(ТекДанные.УИДПользователя);
	
КонецПроцедуры

#КонецОбласти 

#Область ОсновныеМетоды

&НаКлиенте
Процедура ВходПодПользователем()

	ТекДанные = Элементы.ПараметрыВходов.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("УИДПользователя", ТекДанные.УИДПользователя);
	Оповещение = Новый ОписаниеОповещения("ВходПодПользователемЗавершение", ЭтаФорма, ДополнительныеПараметры);
	
	Если ТекДанные.ИмяПользователя = ИмяТекПользователя Тогда
		ПоказатьВопрос(Оповещение, "Войти под текущим пользователем?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);	
	Иначе
	    ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.Да);
	КонецЕсли;	

КонецПроцедуры // НачатьВходПодПользователем()

&НаКлиенте
Процедура ВходПодПользователемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ВойтиПодПользователем(ДополнительныеПараметры.УИДПользователя);	

КонецПроцедуры // ВходПодПользователемЗавершение()
 

&НаКлиенте
Функция ВойтиПодПользователем(УИДПользователя) Экспорт
	
	Если Не ПодготовитьВходПодПользователемНаСервере(УИДПользователя) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыПодключенияОтладки = Неопределено;
	Если ПодключитьКОтладке И ЗначениеЗаполнено(ПротоколОтладки) И ЗначениеЗаполнено(СерверОтладки) Тогда
		ПараметрыПодключенияОтладки = Новый Структура("URLСервераОтладки");
		Если ПротоколОтладки = "TCPIP" Тогда
			ПараметрыПодключенияОтладки.URLСервераОтладки = "tcp://"	
		ИначеЕсли ПротоколОтладки = "HTTP" Тогда
		    ПараметрыПодключенияОтладки.URLСервераОтладки = "http://"
		КонецЕсли;
		ПараметрыПодключенияОтладки.URLСервераОтладки = ПараметрыПодключенияОтладки.URLСервераОтладки + СерверОтладки;
	КонецЕсли; 
	
	СтрокаЗапуска = ПолучитьСтрокуЗапуска(УИДПользователя, ПараметрыПодключенияОтладки);
	
	Попытка
		
		ЗапуститьПриложение(СтрокаЗапуска);
		СтрокаПользовательИБ = ПолучитьСтрокуПользователяИБНаКлиенте(УИДПользователя);
		СтрокаПользовательИБ.ДатаВхода = ТекДатаСеанса();
		СтрокаПользовательИБ.ДатаВосстановленияПараметровПользователя = '00010101';
		ПодключитьОбработчикОжидания("АвтоВосстановлениеПараметровПослеВхода", 15);
		Возврат Истина;
		
	Исключение
		
		ТекДанные = Элементы.ПараметрыВходов.ТекущиеДанные;
		
	    Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удалось запустить базу под пользователем " + ТекДанные.ИмяПользователяИБ
		+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецПопытки;

КонецФункции

&НаСервере
Процедура ВосстановитьПараметрыПользователя(УИДПользователя) Экспорт

	ПользовательИБ = ПользовательИБ(УИДПользователя);
	
	СтрокаПользователяИБ = ПолучитьСтрокуПользователяИБ(УИДПользователя);
	
	ПользовательИБ.СохраняемоеЗначениеПароля = СтрокаПользователяИБ.СохраняемоеЗначениеПароля;
	ПользовательИБ.АутентификацияСтандартная = СтрокаПользователяИБ.Аутентификация1С;
	
	Попытка
		
		ПользовательИБ.Записать();
		
		СтрокаПользователяИБ.ВременныйПароль = "";
		СтрокаПользователяИБ.ДатаВосстановленияПараметровПользователя = ТекущаяДатаСеанса();
		СтрокаПользователяИБ.АктивныВременныеПараметрыПользователя = Ложь;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Восстановлены параметры пользователя " + ПользовательИБ.Имя;
		Сообщение.Сообщить(); 
		
	Исключение
	    ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыВходов() Экспорт

	ПараметрыВходов = Объект.ПараметрыВходов;
	
	ПараметрыВходов.Очистить();
	
	Для каждого ПользовательИБ Из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
		
		Если ВРег(ПользовательИБ.Имя) = ВРег("Робот") Тогда
			Продолжить;
		КонецЕсли; 
		
		ЗаполнитьПараметрыВходовПоСтроке(ПараметрыВходов.Добавить(), ПользовательИБ);	
		
	КонецЦикла; 

КонецПроцедуры

#КонецОбласти 

#Область СлужебныеМетоды

&НаСервере
Функция ПодготовитьВходПодПользователемНаСервере(УИДПользователя)
	
	ПользовательИБ = ПользовательИБ(УИДПользователя);
	Если ПользовательИБ = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СохранитьПараметрыПользователяИБ(ПользовательИБ);
	
	УстановитьВременныеПараметрыПользователя(ПользовательИБ);
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
// Функция - Пользователь ИБ
// Ищет пользователя информационной базы по его имени или ID.
//
// Параметры:
//  УИДПользователя - УникальныйИдентификатор - ID пользователя информационной базы
// 
// Возвращаемое значение:
//   - ПользовательИнформационнойБазы, Неопределено.
//
Функция ПользовательИБ(УИДПользователя)
	
	Возврат ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(УИДПользователя);

КонецФункции // ПользовательИБ() 

&НаКлиентеНаСервереБезКонтекста
// Функция - Подобно ID
//	Проверяет, соответствует ли переданная строка шаблону UID ("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx", где x = [0-9 | a-f | A-F])
//
// Параметры:
//  ПроверяемаяСтрока	 - Строка 
// 
// Возвращаемое значение:
//   - Булево, Истина если соответствует.
//
Функция ПодобноID(Знач ПроверяемаяСтрока) Экспорт

	// проверка длины
	Если СтрДлина(ПроверяемаяСтрока) <> 36 Тогда
		Возврат Ложь;	
	КонецЕсли;
	
	// проверка допустимых символов
	ДопустимыеСимволы = "0123456789abcdef-";	
	
	Для Поз = 1 По СтрДлина(ПроверяемаяСтрока) Цикл
		
		Если СтрНайти(ДопустимыеСимволы, Сред(ПроверяемаяСтрока, Поз, 1)) = 0 Тогда
			
			Возврат Ложь;
			
		КонецЕсли; 	
		
	КонецЦикла;
	
	// проверка шаблона расположения "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
	Подстроки = СтрРазделить(ПроверяемаяСтрока, "-");
	
	Если Подстроки.Количество() <> 5 Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Если СтрДлина(Подстроки[0]) <> 8
		Или СтрДлина(Подстроки[1]) <> 4
		Или СтрДлина(Подстроки[2]) <> 4
		Или СтрДлина(Подстроки[3]) <> 4
		Или СтрДлина(Подстроки[4]) <> 12
		Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	// все проверки пройдены
	Возврат Истина;

КонецФункции // ПодобноID()

&НаСервере
Процедура СохранитьПараметрыПользователяИБ(ПользовательИБ)

	СтрокаПользователяИБ = ПолучитьСтрокуПользователяИБ(ПользовательИБ.УникальныйИдентификатор);
	
	СтрокаПользователяИБ.ИмяПользователя 			= ПользовательИБ.Имя;
	СтрокаПользователяИБ.СохраняемоеЗначениеПароля 	= ПользовательИБ.СохраняемоеЗначениеПароля;
	СтрокаПользователяИБ.Аутентификация1С 			= ПользовательИБ.АутентификацияСтандартная;

КонецПроцедуры

&НаСервере
Процедура УстановитьВременныеПараметрыПользователя(ПользовательИБ)

	СтрокаПользователяИБ = ПолучитьСтрокуПользователяИБ(ПользовательИБ.УникальныйИдентификатор);
	
	ВременныйПароль = НовыйВременныйПароль();
	
	ПользовательИБ.АутентификацияСтандартная 	= Истина;
	ПользовательИБ.Пароль 						= ВременныйПароль;
	Попытка
		ПользовательИБ.Записать();
		СтрокаПользователяИБ.ВременныйПароль 						= ВременныйПароль;
		СтрокаПользователяИБ.АктивныВременныеПараметрыПользователя 	= Истина;
	Исключение
	    ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;

КонецПроцедуры

&НаСервере
Функция ПолучитьСтрокуПользователяИБ(УИДПользователя)

	СтруктураПоиска = Новый Структура("УИДПользователя", УИДПользователя);
	
	ПараметрыВходов = Объект.ПараметрыВходов;
	
	СтрокиПользователяИБ = ПараметрыВходов.НайтиСтроки(СтруктураПоиска);
	
	Если СтрокиПользователяИБ.Количество() = 0 Тогда
		СтрокаПользователяИБ = ПараметрыВходов.Добавить();
		ЗаполнитьПараметрыВходовПоСтроке(СтрокаПользователяИБ, ПользовательИБ(УИДПользователя));
	Иначе
		СтрокаПользователяИБ = СтрокиПользователяИБ[0];
	КонецЕсли;
	
	Возврат СтрокаПользователяИБ;

КонецФункции // ПолучитьСтрокуПользователяИБ()

&НаКлиенте
Функция ПолучитьСтрокуПользователяИБНаКлиенте(УИДПользователя)

	СтруктураПоиска = Новый Структура("УИДПользователя", УИДПользователя);	
	ПараметрыВходов = Объект.ПараметрыВходов;
	
	СтрокиПользователяИБ = ПараметрыВходов.НайтиСтроки(СтруктураПоиска);
	
	Если СтрокиПользователяИБ.Количество() = 0 Тогда
		СтрокаПользователяИБ = ПараметрыВходов.Добавить();
		ЗаполнитьПараметрыВходовПоСтроке(СтрокаПользователяИБ, ПараметрыПользователяИБ(УИДПользователя));
	Иначе
		СтрокаПользователяИБ = СтрокиПользователяИБ[0];
	КонецЕсли;
	
	Возврат СтрокаПользователяИБ;

КонецФункции // ПолучитьСтрокуПользователяИБНаКлиенте()

&НаСервере
Процедура ЗаполнитьПараметрыВходовПоСтроке(СтрокаПользователяИБ, ПользовательИБ)

	СтрокаПользователяИБ.УИДПользователя 			= ПользовательИБ.УникальныйИдентификатор;
	СтрокаПользователяИБ.ИмяПользователя 			= ПользовательИБ.Имя;
	СтрокаПользователяИБ.СохраняемоеЗначениеПароля 	= ПользовательИБ.СохраняемоеЗначениеПароля;
	СтрокаПользователяИБ.Аутентификация1С 			= ПользовательИБ.АутентификацияСтандартная;

КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтрокуЗапуска(УИДПользователя, ПараметрыПодключенияОтладки = Неопределено)

	ПараметрыПользователяИБ = ПараметрыПользователяИБ(УИДПользователя);
	
	СтрокаЗапуска = КаталогПрограммы() 
		+ ?(ПараметрыПользователяИБ.РежимЗапуска = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение
			Или (ПараметрыПользователяИБ.РежимЗапуска = РежимЗапускаКлиентскогоПриложения.Авто 
			И ОсновнойРежимЗапускаЭтоУправляемоеПриложение()),
			"1cv8c.exe", "1cv8.exe")
			+ " ENTERPRISE"
		+ " /IBConnectionString " + СтрокаСоединенияИнформационнойБазы()
		+ " /WA-"
		+ " /n """ + ПараметрыПользователяИБ.Имя + """"
		+ " /p " + ПолучитьСтрокуПользователяИБНаКлиенте(УИДПользователя).ВременныйПароль;
		
	Если ТипЗнч(ПараметрыПодключенияОтладки) = Тип("Структура") Тогда
		
		СтрокаЗапуска = СтрокаЗапуска + " /Debug /DebuggerURL " + ПараметрыПодключенияОтладки.URLСервераОтладки;
		
	КонецЕсли; 
		
	Возврат СтрокаЗапуска;

КонецФункции

&НаСервереБезКонтекста
Функция ОсновнойРежимЗапускаЭтоУправляемоеПриложение()

	Возврат Метаданные.ОсновнойРежимЗапуска = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение;

КонецФункции // ОсновнойРежимЗапускаЭтоУправляемоеПриложение()

&НаСервереБезКонтекста
Функция ПараметрыПользователяИБ(УИДПользователя)

	ПользовательИБ = ПользовательИБ(УИДПользователя);
	Если ПользовательИБ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ПараметрыПользователяИБ = Новый Структура("АутентификацияСтандартная, Имя, РежимЗапуска, СохраняемоеЗначениеПароля, УникальныйИдентификатор");
	ЗаполнитьЗначенияСвойств(ПараметрыПользователяИБ, ПользовательИБ);
	
	Возврат ПараметрыПользователяИБ;

КонецФункции // ПараметрыПользователяИБ()

&НаКлиентеНаСервереБезКонтекста
Функция НовыйВременныйПароль()

	Диапазоны = Новый Массив;
	Диапазоны.Добавить("65:90"); 	// A - Z
	Диапазоны.Добавить("97:122"); 	// a - z
	Диапазоны.Добавить("48:57"); 	// 0 - 9
	Диапазоны.Добавить("33");		// !
	Диапазоны.Добавить("35:38");	// # $ % &
	Диапазоны.Добавить("40:43");	// ( ) * +
	Диапазоны.Добавить("45");		// -
	Диапазоны.Добавить("61");		// =
	Диапазоны.Добавить("94");		// ^
	Диапазоны.Добавить("126");		// ~
	
	ВременныйПароль = "";
	
	ГСЧ = Новый ГенераторСлучайныхЧисел;
	
	ДиапазоныВГраница = Диапазоны.ВГраница();
	Для Сч = 1 По 50 Цикл
		
		ТекДиапазон = Диапазоны[ГСЧ.СлучайноеЧисло(0, ДиапазоныВГраница)];
		
		ГраницыСтроками = СтрРазделить(ТекДиапазон, ":");
		НГраница 		= 	Число(ГраницыСтроками[0]);
		ВГрананица 		= Число(ГраницыСтроками[ГраницыСтроками.ВГраница()]);
		
		ТекСимвол 		= Символ(ГСЧ.СлучайноеЧисло(НГраница, ВГрананица));
		
		ВременныйПароль = ВременныйПароль + ТекСимвол;
		
	КонецЦикла; 
	
	Возврат ВременныйПароль;

КонецФункции // НовыйВременныйПароль()

&НаСервереБезКонтекста
Функция ТекДатаСеанса()

	Возврат ТекущаяДатаСеанса();

КонецФункции // ТекДатаСеанса()

&НаКлиенте
Процедура АвтоВосстановлениеПараметровПослеВхода()

	СтруктураПоиска = Новый Структура("АктивныВременныеПараметрыПользователя", Истина);
	Если Объект.ПараметрыВходов.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
		ОтключитьОбработчикОжидания("АвтоВосстановлениеПараметровПослеВхода");
	КонецЕсли; 
	
	АвтоВосстановлениеПараметровПослеВходаНаСервере(ИмяКомпьютера());

КонецПроцедуры // АвтоВосстановлениеПараметровПослеВхода()

&НаСервере
Процедура АвтоВосстановлениеПараметровПослеВходаНаСервере(ИмяКомпьютера)

	// Восстанавливаем параметры для "давних" входов - которым больше минуты.
	// Для "недавних" - если есть сеанс, начатый после даты входа
	
	Для каждого СтрокаВход Из Объект.ПараметрыВходов Цикл
		
		Если Не СтрокаВход.АктивныВременныеПараметрыПользователя Тогда
			Продолжить;
		КонецЕсли; 
		
		Если СтрокаВход.ДатаВхода < ТекущаяДатаСеанса() - 60 Тогда
			ВосстановитьПараметрыПользователя(СтрокаВход.УИДПользователя);
			Продолжить;
		КонецЕсли; 
		
		ПользовательИБ = ПользовательИБ(СтрокаВход.УИДПользователя);
		// СоединенияИБ - модуль такой бывает... Поэтому переменную назовём так:
		_С_о_е_д_и_н_е_н_и_я_И_Б = ПолучитьСоединенияИнформационнойБазы();
		Для каждого СоединениеИБ Из _С_о_е_д_и_н_е_н_и_я_И_Б Цикл
			Если СоединениеИБ.Пользователь.УникальныйИдентификатор = ПользовательИБ.УникальныйИдентификатор 
				И СоединениеИБ.НачалоСоединения >= СтрокаВход.ДатаВхода
				И СоединениеИБ.ИмяКомпьютера = ИмяКомпьютера
				Тогда
				
				ВосстановитьПараметрыПользователя(СтрокаВход.УИДПользователя);
				
			КонецЕсли; 
		КонецЦикла; 
		
	КонецЦикла; 

КонецПроцедуры // АвтоВосстановлениеПараметровПослеВходаНаСервере()

&НаСервере
Процедура ВосстановитьВсеПараметрыВходаНаСервере()

	СтруктураПоиска = Новый Структура("АктивныВременныеПараметрыПользователя", Истина);
	СтрокиВосстановить = Объект.ПараметрыВходов.НайтиСтроки(СтруктураПоиска);
	Для каждого СтрокаВход Из СтрокиВосстановить Цикл
		ВосстановитьПараметрыПользователя(СтрокаВход.УИДПользователя); 
	КонецЦикла; 

КонецПроцедуры // ВосстановитьВсеПараметрыВходаНаСервере()

&НаСервере
Процедура НастроитьУсловноеОформлениеПоТекущемуПользователю()

	ЭлемУО = УсловноеОформление.Элементы.Добавить();
	
	ЭлемУО.Использование = Истина;
	ПолеУО = ЭлемУО.Поля.Элементы.Добавить();
	ПолеУО.Поле = Новый ПолеКомпоновкиДанных("ПараметрыВходов");
	ПолеУО.Использование = Истина;
	
	ЭлемУООформлениеШрифт = ЭлемУО.Оформление.Элементы.Найти("Шрифт");
	ЭлемУООформлениеШрифт.Значение = Новый Шрифт(ЭлемУООформлениеШрифт.Значение,,, Истина);
	ЭлемУООформлениеШрифт.Использование = Истина;
	
	ЭлемОтбора = ЭлемУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлемОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлемОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПараметрыВходов.ИмяПользователя");
	ЭлемОтбора.ПравоеЗначение = ИмяТекПользователя;
	ЭлемОтбора.Использование = Истина;
		

КонецПроцедуры // НастроитьУсловноеОформлениеПоТекущемуПользователю()


#КонецОбласти 

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПараметрыВходовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВходПодПользователем();
	
КонецПроцедуры
	
#КонецОбласти 




 
 
 
 

